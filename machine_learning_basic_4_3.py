# -*- coding: utf-8 -*-
"""Machine Learning Basic - 4.3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fx1je_tT-_2NlgGEYfowIJ4RoPQmVPSS

Systems Specifiactions
"""

!cat /proc/cpuinfo

!pip install

"""NumPy"""

import numpy as np

from time import process_time

python_list = [i for i in range(10000)]

start_time = process_time()

python_list = [i+5 for i in python_list]

end_time = process_time()

print(end_time - start_time)

np_array = np.array([i for i in range(10000)])

start_time = process_time()

np_array += 5

end_time = process_time()

print(end_time - start_time)

"""Pandas"""

import pandas as pd

"""Creating a Pandas Dataframe"""

from sklearn.datasets import load_diabetes

diabetes_dataset = load_diabetes()

type(diabetes_dataset)

print(diabetes_dataset)

# Pandas Dataframe

diabetes_df = pd.DataFrame(diabetes_dataset.data, columns= diabetes_dataset.feature_names)

diabetes_df.head()

diabetes_df.shape

"""CSV file to Dataframe"""

diabetes_df = pd.read_csv('/content/diabetes.csv')

type(diabetes_df)

diabetes_df.head()

"""Loading the data from a excel file to a pandas Dataframe
pd.read_excel('file_path')

Exporting a DataFrame to a csv file
"""

file_path.to_csv('file_name.csv')

"""Exporting the Pandas DataFrame to an exvel File:
df.to_excel('file_name')
"""

random_df = pd.DataFrame(np.random.rand(20,10))

random_df.head()

random_df.shape

"""Inspecting a DataFrame"""

diabetes_df.shape

# Print the first 5 rows
diabetes_df.head()

# Print the last 5 rows

diabetes_df.tail()

# Informations about the DataFrame
diabetes_df.info()

# Finding the numbers of missing values
diabetes_df.isnull().sum()

# Counting the values basted on the labels
diabetes_df.value_counts('Outcome')

# Group the values based on the mean
diabetes_df.groupby('Outcome').mean()

"""Statstical Measures"""

# Count or numbers of values
diabetes_df.count()

# Standard deviation - column wise
diabetes_df.std()

# Min
diabetes_df.min()

# Max
diabetes_df.max()

# All the statistical measures about the dataframe
diabetes_df.describe()

"""Manipulating a DataFrame"""

# Adding a column to the DataFrame
diabetes_df['Age_in_days'] = diabetes_df['Age']*365

diabetes_df.head()

# Removing a row
diabetes_df.drop(index=0, axis=0)

# Removing a column
diabetes_df.drop(columns='Age_in_days', axis=1)

# Locating a row using a index value
diabetes_df.iloc[3]

# locating a particular column
print(diabetes_df.iloc[:,0]) # First column
print(diabetes_df.iloc[:,1]) # Second column
print(diabetes_df.iloc[:,2]) # Third column
print(diabetes_df.iloc[:,-1]) # Last column

"""Correlations:

1. Positve Correlations
2. Negative Correlations
"""

diabetes_df.corr()

"""Matplotlib"""

import matplotlib.pyplot as plt

import numpy as np

x = np.linspace(0,10,100)
y = np.sin(x)
z = np.cos(x)

print(x)

"""Ploting the data"""



# Sine wave
plt.plot(x,y)
plt.show()



"""Seaborn


*   Data Visualization Libary


"""

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

"""Note: Seaborn has some built-in datasets"""

# total bill vs tip dataset
tips = sns.load_dataset('tips')

tips.head()

# Setting a theme for the plots
sns.set_theme()

# Visualize the data
sns.relplot(data=tips,x='total_bill', y='tip', col='time', hue='smoker', style ='smoker', size = 'size')

# Load the iris dataset
iris = sns.load_dataset('iris')

iris.head()

sns.scatterplot(x='sepal_length', y='petal_length', data=iris, hue='species')

sns.scatterplot(x='sepal_length', y='petal_width', data=iris, hue='species')

# Loading the titanic dataset
titanic = sns.load_dataset('titanic')

titanic.head()

titanic.shape

# Count plot
sns.countplot(x='class', data=titanic)

sns.countplot(x='survived', data=titanic)

sns.barplot(x='sex', y='survived', hue='class', data=titanic)

# House Price dataset
from sklearn.datasets import fetch_california_housing
fetch_california_housing = fetch_california_housing()

house = pd.DataFrame(fetch_california_housing.data, columns=fetch_california_housing.feature_names)
house['Price'] = fetch_california_housing.target

house.head()

"""Distribution Plot"""

sns.distplot(house['Price'])

"""Heat Map"""

correlation = house.corr()

# Making a Heat Map
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""Importing Datasets through Kaggle API"""

!pip install kaggle

# Uploading Kaggle.json File
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Import the Earthquake Dataset
!kaggle competitions download -c LANL-Earthquake-Prediction

# Extracting compressed file
from zipfile import ZipFile
dataset = '/content/LANL-Earthquake-Prediction.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""Methods to Handle Missing Values

1. Imputation
2. Dropping
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Loading the dataset to a Pandas Dataframe
dataset = pd.read_csv('/content/Placement_Dataset.csv')

dataset.head()

dataset.shape

dataset.isnull().sum()

"""Central Tendencies:
1. Mean
2. Median
3. Mode
"""

# Analyze the distribution of data in the salary
fig, ax = plt.subplots(figsize=(8,8))
sns.distplot(dataset.salary)

dataset['salary'].fillna(dataset['salary'].median(), inplace=True)

dataset.isnull().sum()